<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">

    <style>
        .container {
            display: flex;
        }
        .left {
            flex: 1;  /* 减小左侧区域，使其占比为1/10 */
            background-color: #f0f0f0;
        }
        .right {
            flex: 9;  /* 增大右侧区域，使其占比为9/10 */
            background-color: #d0d0f0;
        }
        .right-content {
            display: none;
        }
        dialog {
            width: 500px;
        }
        .dialog-title {
            font-size: 1em;
        }

        /* 新增的CSS规则 */
        label {
            display: flex;
            justify-content: space-between;
            max-width: 500px;  /* 根据需要设置合适的宽度 */
            margin-bottom: 10px;  /* 这会在每个标签下方添加10像素的间隙 */
        }

        .label-text {
            flex: 1;
        }

        .input-field {
            flex: 4;
            width: 30%;  /* 减小输入框的宽度 */
            margin-left: 2px;  /* 为输入框和标签文字之间添加一些空间 */
        }

        .required-field {
            color: red;
            font-weight: bold;
        }

        #ssh-connections-table {
            width: 100%; /* 使表格宽度与右侧区域相同 */
            border-collapse: collapse; /* 删除表格间距 */
        }

        #ssh-connections-table th {
            text-align: center; /* 使表头文字居中 */
            border: 1px solid #dddddd; /* 添加边框 */
            padding: 8px; /* 增加内边距 */
        }

        #ssh-connections-table td {
            text-align: center; /* 使单元格文本居中 */
            border: 1px solid #dddddd; /* 添加边框 */
            padding: 8px; /* 增加内边距 */
        }

        #ssh-connections-table input[type="checkbox"] {
            margin-left: auto;
            margin-right: auto;
        }



        /* 新增的CSS规则结束 */
    </style>


</head>
<body>
<div class="container">
    <div class="left">
        <h2>左侧区域</h2>
        <button id="manage-btn">源数据管理</button>
    </div>
    <div class="right">
        <h2>右侧区域</h2>
        <div id="right-content" class="right-content">
            <button id="new-btn">+新建源连接</button>
            <button id="delete-btn">删除按钮</button>

            <table id="ssh-connections-table">
                <thead>
                <tr>
                    <th><input type="checkbox" id="select-all"></th>
                    <th>名称</th>
                    <th>创建时间</th>
                    <th>描述</th>
                    <th>操作</th>
                </tr>
                </thead>
                <tbody id="ssh-connections-table-body">
                <!-- 行数据将被插入到这里 -->
                </tbody>
            </table>

        </div>


    </div>
</div>



<dialog id="dialog">
    <form method="dialog">
        <h1 class="dialog-title">新建SSH源连接</h1>

        <label><span class="label-text required-field">*名称：</span><input class="input-field" type="text" id="name" name="name"></label>
        <label><span class="label-text">描述：</span><input class="input-field" type="text" id="description" name="description"></label>
        <label><span class="label-text required-field">*主机：</span><input class="input-field" type="text" id="host" name="host"></label>
        <label><span class="label-text required-field">*端口：</span><input class="input-field" type="text" id="port" name="port"></label>
        <label><span class="label-text required-field">*用户名：</span><input class="input-field" type="text" id="username" name="username"></label>
        <label><span class="label-text required-field">*密码：</span><input class="input-field" type="password" id="password" name="password"></label>

        <menu>
            <button value="cancel">取消</button>
            <button id="test-btn" type="button">测试连通性</button>
            <button id="confirm-btn" value="submit">确定</button>
        </menu>
    </form>
</dialog>


<dialog id="alert-dialog" class="alert-dialog">
    <p id="alert-message"></p>
</dialog>

<style>
    .alert-dialog {
        position: absolute;
        top: 50%;  // 调整这个值可以改变对话框距离顶部的距离
    left: 75%;  // 调整这个值可以改变对话框距离左侧的距离
    width: 50%;  // 对话框的宽度
    height: auto;  // 对话框的高度，设置为auto可以让对话框的高度自适应内容
    transform: translate(-50%, -50%);  // 使用transform可以使对话框以其中心点定位，而不是其左上角
    }
</style>





<script>

    let isEditing = false; // 在全局范围内引入状态变量
    function isNameExist(name) {
        const tableBody = document.getElementById('ssh-connections-table-body');
        const rows = tableBody.querySelectorAll('tr');

        for (let row of rows) {
            const cellName = row.cells[1].innerText;
            if (cellName === name) return true;
        }

        return false;
    }


    function showAlert(message) {
        const alertDialog = document.getElementById('alert-dialog');
        const alertMessage = document.getElementById('alert-message');

        alertMessage.textContent = message;
        alertDialog.showModal();

        setTimeout(function() {
            alertDialog.close();
        }, 3000);
    }

    async function loadData(pageNumber) {
        const response = await fetch(`/get-data?page=${pageNumber}&size=20`);
        const data = await response.json();

        // 清空现有表格数据
        const tableBody = document.getElementById('ssh-connections-table-body');
        tableBody.innerHTML = '';

        // 添加新数据
        data.content.forEach(row => {
            const tableRow = tableBody.insertRow();
            tableRow.insertCell(0).innerHTML = '<input type="checkbox">';
            tableRow.insertCell(1).innerHTML = row.name;
            tableRow.insertCell(2).innerHTML = new Date(row.createdAt).toLocaleString(); // 格式化日期
            tableRow.insertCell(3).innerHTML = row.description;
            const actionsCell = tableRow.insertCell(4);
            actionsCell.innerHTML = '<button class="edit-btn">编辑</button> <button class="delete-btn">删除</button>';

            actionsCell.querySelector('.edit-btn').addEventListener('click', function() {

                openEditDialog(row);
                document.getElementById('name').blur(); // 这将移除'名称'输入框的焦点

            });

            actionsCell.querySelector('.delete-btn').addEventListener('click', function() {
                if (confirm('确定要删除吗?')) {
                    tableBody.deleteRow(row.rowIndex - 1);
                }
            });

            // 添加事件监听器，用于编辑和删除功能
        });

        // 更新分页控制（如果有）
    }


    function openEditDialog(rowData) {
        isEditing = true; // 编辑时将编辑状态设为true
        document.getElementById('name').value = rowData.name;
        document.getElementById('description').value = rowData.description;
        document.getElementById('host').value = rowData.host;
        document.getElementById('port').value = rowData.port;
        document.getElementById('username').value = rowData.username;
        document.getElementById('password').value = rowData.password;
        document.getElementById('dialog').showModal();
    }

    function openUpdateDialog(rowData) {
        isEditing = true; // 编辑时将编辑状态设为true
        document.getElementById('name').value = rowData.name;
        document.getElementById('description').value = rowData.description;
        document.getElementById('host').value = rowData.host;
        document.getElementById('port').value = rowData.port;
        document.getElementById('username').value = rowData.username;
        document.getElementById('password').value = rowData.password;

        // 保存当前编辑行的ID
        document.getElementById('dialog').dataset.editingId = rowData.id;
        document.getElementById('dialog').showModal();
    }


    document.getElementById('manage-btn').addEventListener('click', function() {
        document.getElementById('right-content').style.display = 'block';
        document.getElementById('ssh-connections-table').style.display = 'table'; // 显示表格
        loadData(0); // 从第一页开始加载
    });

    document.getElementById('select-all').addEventListener('change', function() {
        var checkboxes = document.querySelectorAll('#ssh-connections-table tbody input[type="checkbox"]');
        checkboxes.forEach(checkbox => checkbox.checked = this.checked);
    });



    document.getElementById('new-btn').addEventListener('click', function() {
        isEditing = false; // 新建时将编辑状态设为false
        document.getElementById('dialog').showModal();
        document.getElementById('name').blur(); // 这将移除'名称'输入框的焦点
    });


     document.getElementById('confirm-btn').addEventListener('click', async function(event) {

            // ... 获取输入值的代码 ...
        const name = document.getElementById('name').value;
         if (!isEditing && isNameExist(name)) {
             event.preventDefault(); // 阻止表单提交
             alert('数据源名称已经存在，请重新输入');
             return; // 这里添加返回，确保名称存在时不会继续执行以下代码
         }
        const description = document.getElementById('description').value;
        const host = document.getElementById('host').value;
        const port = document.getElementById('port').value;
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        if (!name || !host || !port || !username || !password) {
            event.preventDefault(); // 阻止表单提交
            alert('请填写所有必填字段！');
            return;
        }

         // 将SSH连接详情作为JSON发送到后端
         const response = await fetch('/create-ssh', {
             method: 'POST',
             headers: {
                 'Content-Type': 'application/json'
             },
             body: JSON.stringify({
                 name: name,
                 description: description,
                 host: host,
                 port: port,
                 username: username,
                 password: password
             })
         });

         if (response.ok) {
             // 处理成功的响应，例如插入新行到表格中
         } else {
             // 处理错误
             alert('保存SSH连接失败，请稍后重试。');
         }

         document.getElementById('dialog').close();

        const createdAt = new Date().toLocaleString();
        const tableBody = document.getElementById('ssh-connections-table-body');

        const row = tableBody.insertRow();
        row.insertCell(0).innerHTML = '<input type="checkbox">';
        row.insertCell(1).innerHTML = name;
        row.insertCell(2).innerHTML = createdAt;
        row.insertCell(3).innerHTML = description;

        const actionsCell = row.insertCell(4);
        actionsCell.innerHTML = '<button class="edit-btn">编辑</button> <button class="delete-btn">删除</button>';

         actionsCell.querySelector('.edit-btn').addEventListener('click', function() {
             openEditDialog({
                 name: name,
                 description: description,
                 host: host,
                 port: port,
                 username: username,
                 password: password
             });
         });

        actionsCell.querySelector('.delete-btn').addEventListener('click', function() {
            if (confirm('确定要删除吗?')) {
                tableBody.deleteRow(row.rowIndex - 1);
            }
        });

        document.getElementById('dialog').close();
    });



    document.getElementById('test-btn').addEventListener('click', async function() {
        const host = document.getElementById('host').value;
        const port = document.getElementById('port').value;
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        console.log('开始进行SSH连接测试');
        console.log('host:', host, 'port:', port, 'username:', username, 'password:', password);

        const response = await fetch('/test-ssh', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ host, port, username, password })
        });


        if (response.ok) {
            //const { status } = await response.json();
            showAlert('ok，连接成功');
        } else {
            showAlert('对不起，请求失败');
        }

    });

</script>

</body>
</html>
